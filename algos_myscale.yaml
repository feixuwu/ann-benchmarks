float:
  any:

    pinecone:
      docker-tag: ann-benchmarks-redisearch
      module: ann_benchmarks.algorithms.myscale
      constructor: MyScale
      base-args: ["@metric"]
      run-groups:
        redisearch:
          arg-groups: [[4, 8, 12, 16, 24, 36, 48, 64, 96]]
          query-args: [[10, 20, 40, 80, 120, 200, 400, 600, 800]]

 

  angular:
    vamana(diskann):
      docker-tag: ann-benchmarks-diskann
      module: ann_benchmarks.algorithms.diskann
      constructor: Vamana
      base-args : ["@metric"]
      run-groups :
        vamana_125_64_1-2:
           args : [{'l_build': 125, 'max_outdegree': 64, 'alpha': 1.2}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_125_64_1-1:
           args : [{'l_build': 125, 'max_outdegree': 64, 'alpha': 1.1}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_125_64_1:
           args : [{'l_build': 125, 'max_outdegree': 64, 'alpha': 1}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_125_32_1-2:
           args : [{'l_build': 125, 'max_outdegree': 32, 'alpha': 1.2}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_125_32_1-1:
           args : [{'l_build': 125, 'max_outdegree': 32, 'alpha': 1.1}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_125_32_1:
           args : [{'l_build': 125, 'max_outdegree': 32, 'alpha': 1}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
    vamana-pq(diskann):
      docker-tag: ann-benchmarks-diskann_pq
      module: ann_benchmarks.algorithms.diskann
      constructor: VamanaPQ
      base-args : ["@metric"]
      run-groups :
        vamana_pq_125_64_1-2_14:
           args : [{'l_build': 125, 'max_outdegree': 64, 'alpha': 1.2, 'chunks': 14}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_pq_125_64_1_14:
           args : [{'l_build': 125, 'max_outdegree': 64, 'alpha': 1, 'chunks': 14}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_pq_125_64_1-2_28:
           args : [{'l_build': 125, 'max_outdegree': 64, 'alpha': 1.2, 'chunks': 28}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_pq_125_64_1_28:
           args : [{'l_build': 125, 'max_outdegree': 64, 'alpha': 1, 'chunks': 28}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_pq_125_64_1-2_42:
           args : [{'l_build': 125, 'max_outdegree': 64, 'alpha': 1.2, 'chunks': 42}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_pq_125_64_1_42:
           args : [{'l_build': 125, 'max_outdegree': 64, 'alpha': 1, 'chunks': 42}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_pq_125_32_1-2_14:
           args : [{'l_build': 125, 'max_outdegree': 32, 'alpha': 1.2, 'chunks': 14}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_pq_125_32_1_14:
           args : [{'l_build': 125, 'max_outdegree': 32, 'alpha': 1, 'chunks': 14}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_pq_125_32_1-2_28:
           args : [{'l_build': 125, 'max_outdegree': 32, 'alpha': 1.2, 'chunks': 28}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_pq_125_32_1_28:
           args : [{'l_build': 125, 'max_outdegree': 32, 'alpha': 1, 'chunks': 28}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_pq_125_32_1-2_42:
           args : [{'l_build': 125, 'max_outdegree': 32, 'alpha': 1.2, 'chunks': 42}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
        vamana_pq_125_32_1_42:
           args : [{'l_build': 125, 'max_outdegree': 32, 'alpha': 1, 'chunks': 42}]
           query-args : [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]
    puffinn:
      disable: true
      docker-tag: ann-benchmarks-puffinn
      module: ann_benchmarks.algorithms.puffinn
      constructor: Puffinn
      base-args: ["@metric"]
      run-groups:
        base:
            args: [
              [ 268435456, 536870912, 1073741824, 2147483648, 4294967296],
              ['fht_crosspolytope'],
            ]
            query-args: [[0.1, 0.2, 0.5, 0.7, 0.9, 0.95, 0.99]]
    kgraph:
      disable: true
      docker-tag: ann-benchmarks-kgraph
      module: ann_benchmarks.algorithms.kgraph
      constructor: KGraph
      base-args: ["@metric"]
      run-groups:
        kgraph:
          args: [{'reverse': -1, "K": 200, "L": 300, "S": 20}, False]
          query-args: [[1, 2, 3, 4, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]]
    hnsw(nmslib):
      docker-tag: ann-benchmarks-nmslib
      module: ann_benchmarks.algorithms.nmslib
      constructor: NmslibReuseIndex
      base-args: ["@metric", "hnsw"]
      run-groups:
        M-48:
          arg-groups:
            - {"M": 48, "post": 2, "efConstruction": 800}
            - False
          query-args: [[50, 70, 90, 120, 160, 200, 400, 600, 700, 800, 1000,
              1400, 1600, 2000]]
        M-32:
          arg-groups:
            - {"M": 32, "post": 2, "efConstruction": 800}
            - False
          query-args: [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 120, 140, 160,
              200, 300, 400, 600, 700, 800, 1000, 1200, 1400, 1600, 2000]]
        M-20:
          arg-groups:
            - {"M": 20, "post": 0, "efConstruction": 800}
            - False
          query-args: [[2, 5, 10, 15, 20, 30, 40, 50, 70, 80]]
        M-12:
          arg-groups:
            - {"M": 12, "post": 0, "efConstruction": 800}
            - False
          query-args: [[1, 2, 5, 10, 15, 20, 30, 40, 50, 70, 80]]
    SW-graph(nmslib):
      docker-tag: ann-benchmarks-nmslib
      module: ann_benchmarks.algorithms.nmslib
      constructor: NmslibReuseIndex
      base-args: ["@metric", "sw-graph"]
      run-groups:
        NN-30:
          arg-groups:
            - {"NN": 30}
            - False
          query-args: [[700, 650, 550, 450, 350, 275, 200, 150, 120, 80,
              50, 30]]
        NN-15:
          arg-groups:
            - {"NN": 15}
            - False
          query-args: [[80, 50, 30, 20]]
        NN-3:
          arg-groups:
            - {"NN": 3}
            - False
          query-args: [[120, 80, 60, 40, 20, 10, 8, 4, 2]]
    rpforest:
      disable: true
      docker-tag: ann-benchmarks-rpforest
      module: ann_benchmarks.algorithms.rpforest
      constructor: RPForest
      run-groups:
        base:
          args: [[3, 10, 40, 100, 400],
                [3, 10, 40, 100, 400]]
    pynndescent:
      docker-tag: ann-benchmarks-pynndescent
      module: ann_benchmarks.algorithms.pynndescent
      constructor: PyNNDescent
      base-args: ["@metric"]
      run-groups:
        NN-20:
          arg-groups:
            - {"n_neighbors": [20], "diversify_prob": [1.0],
               "pruning_degree_multiplier":[0.5, 1.0], leaf_size: 20}
          query-args: [[0.0, 0.02, 0.04, 0.06, 0.08, 0.10, 0.12]]
        NN-40:
          arg-groups:
            - {"n_neighbors": [40], "diversify_prob": [0.5, 1.0],
               "pruning_degree_multiplier":[1.5], leaf_size: 25}
          query-args: [[0.0, 0.02, 0.04, 0.06, 0.08, 0.10, 0.12, 0.14, 0.16]]
        NN-80-fast:
          arg-groups:
            - {"n_neighbors": 80, diversify_prob: 1.0,
               "pruning_degree_multiplier": 2.0, leaf_size: 20}
          query-args: [[0.0, 0.02, 0.04, 0.08, 0.12, 0.16, 0.20, 0.24]]
        NN-80-accurate:
          arg-groups:
            - {"n_neighbors": 80, diversify_prob: 0.25,
                "pruning_degree_multiplier": 2.0, leaf_size: 30}
          query-args: [[0.08, 0.12, 0.16, 0.20, 0.24, 0.28, 0.32, 0.36]]
        NN-120-fast:
          arg-groups:
            - {"n_neighbors": 120, "diversify_prob": 1.0,
               "pruning_degree_multiplier":2.5, leaf_size: 20}
          query-args: [[0.0, 0.04, 0.08, 0.16, 0.20, 0.24, 0.28, 0.32]]
        NN-120-accurate:
          arg-groups:
            - {"n_neighbors": 120, "diversify_prob": 0.125,
               "pruning_degree_multiplier":2.5, leaf_size: 35}
          query-args: [[0.16, 0.20, 0.24, 0.28, 0.32, 0.36]]
    scann:
      docker-tag: ann-benchmarks-scann
      module: ann_benchmarks.algorithms.scann
      constructor: Scann
      run-groups:
        scann1:
          args: [[2000], [0.2], [2], ["dot_product"]]
          query-args: [[[1, 30], [2, 30], [4, 30], [8, 30], [30, 120], [35, 100], [40, 80], [45, 80], [50, 80], [55, 95], [60, 110], [65, 110], [75, 110], [90, 110], [110, 120], [130, 150], [150, 200], [170, 200], [200, 300], [220, 500], [250, 500], [310, 300], [400, 300], [500, 500], [800, 1000]]]
        scann2:
          args: [[1500], [0.55], [1], ["dot_product"]]
          query-args: [[[1, 30], [2, 30], [4, 30], [8, 30], [8, 25], [10, 25], [12, 25], [13, 25], [14, 27], [15, 30], [17, 30], [18, 40], [20, 40], [22, 40], [25, 50], [30, 50], [35, 55], [50, 60], [60, 60], [80, 80], [100, 100]]]
        scann3:
          args: [[1000], [.2], [1], ["dot_product"]]
          query-args: [[[1, 30], [2, 30], [4, 30], [8, 30], [9, 25], [11, 35], [12, 35], [13, 35], [14, 40], [15, 40], [16, 40], [17, 45], [20, 45], [20, 55], [25, 55], [25, 70], [30, 70], [40, 90], [50, 100], [60, 120], [70, 140]]]
        scann4:
          args: [[1400], [0.15], [3], ["dot_product"]]
          query-args: [[[1, 30], [4, 30], [9, 30], [16, 32], [25, 50], [36, 72], [49, 98], [70, 150], [90, 200], [120, 210], [180, 270], [210, 330], [260, 400], [320, 500], [400, 600], [500, 700], [800, 900]]]
    elasticsearch:
      docker-tag: ann-benchmarks-elasticsearch
      module: ann_benchmarks.algorithms.elasticsearch
      constructor: ElasticsearchKNN
      base-args: ["@metric", "@dimension"]
      run-groups:
        m-16-ef-100:
          arg-groups:
            - {"m": 16,  "ef_construction": 100} # index_options
          query-args: [[10, 20, 40, 80, 160]] # num_candidates
    opensearchknn:
      docker-tag: ann-benchmarks-opensearchknn
      module: ann_benchmarks.algorithms.opensearchknn
      constructor: OpenSearchKNN
      base-args: ["@metric", "@dimension"]
      run-groups:
        M-4:
          arg-groups:
            - {"M": 4,  "efConstruction": 500}
          query-args: [[10, 20, 40, 80, 120, 200, 400, 600, 800]]
        M-8:
          arg-groups:
            - {"M": 8,  "efConstruction": 500}
          query-args: [[10, 20, 40, 80, 120, 200, 400, 600, 800]]
        M-12:
          arg-groups:
            - {"M": 12,  "efConstruction": 500}
          query-args: [[10, 20, 40, 80, 120, 200, 400, 600, 800]]
        M-16:
          arg-groups:
            - {"M": 16,  "efConstruction": 500}
          query-args: [[10, 20, 40, 80, 120, 200, 400, 600, 800]]
        M-24:
          arg-groups:
            - {"M": 24,  "efConstruction": 500}
          query-args: [[10, 20, 40, 80, 120, 200, 400, 600, 800]]
        M-36:
          arg-groups:
            - {"M": 36,  "efConstruction": 500}
          query-args: [[10, 20, 40, 80, 120, 200, 400, 600, 800]]
        M-48:
          arg-groups:
            - {"M": 48,  "efConstruction": 500}
          query-args: [[10, 20, 40, 80, 120, 200, 400, 600, 800]]
    hnsw(vespa):
      docker-tag: ann-benchmarks-vespa
      module: ann_benchmarks.algorithms.vespa
      constructor: VespaHnsw
      base-args: ["@metric", "@dimension"]
      run-groups:
        M-4:
          arg-groups:
            - {"M": 4, "efConstruction": 500}
          query-args: [[10, 20, 40, 80, 120, 200, 400, 600, 800]]
        M-8:
          arg-groups:
            - {"M": 8, "efConstruction": 500}
          query-args: [[10, 20, 40, 80, 120, 200, 400, 600, 800]]
        M-12:
          arg-groups:
            - {"M": 12, "efConstruction": 500}
          query-args: [[10, 20, 40, 80, 120, 200, 400, 600, 800]]
        M-16:
          arg-groups:
            - {"M": 16, "efConstruction": 500}
          query-args: [[10, 20, 40, 80, 120, 200, 400, 600, 800]]
        M-24:
          arg-groups:
            - {"M": 24, "efConstruction": 500}
          query-args: [[10, 20, 40, 80, 120, 200, 400, 600, 800]]
        M-36:
          arg-groups:
            - {"M": 36, "efConstruction": 500}
          query-args: [[10, 20, 40, 80, 120, 200, 400, 600, 800]]
        M-48:
          arg-groups:
            - {"M": 48, "efConstruction": 500}
          query-args: [[10, 20, 40, 80, 120, 200, 400, 600, 800]]
        M-64:
          arg-groups:
            - {"M": 64, "efConstruction": 500}
          query-args: [[10, 20, 40, 80, 120, 200, 400, 600, 800]]
        M-96:
          arg-groups:
            - {"M": 96, "efConstruction": 500}
          query-args: [[10, 20, 40, 80, 120, 200, 400, 600, 800]]
    vearch:
      docker-tag: ann-benchmarks-vearch
      module: ann_benchmarks.algorithms.vearch
      constructor: VearchIndex
      base-args: ["@metric"]
      run-groups:
        vearch1:
          args: [[2048], [0.2], [1, 2]]
          query-args: [[1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 25, 28, 31, 34, 37, 40, 45, 50, 55, 60, 65, 75, 90, 115, 130, 150, 170, 200, 230, 250, 300, 400, 500, 800], [3, 5, 10]]

bit:
  hamming:
    mih:
      docker-tag: ann-benchmarks-mih
      module: ann_benchmarks.algorithms.subprocess
      constructor: BitSubprocessPrepared
      base-args: [["mih/bin/mihwrapper"]]
      disabled: True
      run-groups:
        base:
          # Note that MIH assumes that 5 <= dimension / chunks <= 37 and segfaults otherwise.
          # This parameter space is explored below using the `chunk-factor`.
          # A factor of 0 means that dimension / chunks = 5 which proceeds linearly to
          # dimension / chunks = 37 for a factor of 1.
          # The r parameter denotes a reordering with n / r steps. If r is 0, no reordering
          # takes places. Otherwise, n / r points from the dataset are used for a
          # re-ording process. MIH requires either r = 0 or r >= 2.
          args: { "d" : "@dimension", "r" : [0, 2, 3],
            "chunk-factor" : [0.2, 0.5, 0.8] }
    kgraph:
      disable: true
      docker-tag: ann-benchmarks-kgraph
      module: ann_benchmarks.algorithms.kgraph
      constructor: KGraph
      base-args: ["euclidean"]
      run-groups:
        kgraph:
          args: [[1, 2, 3, 4, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100],
                 {'reverse': -1, "K": 200, "L": 300, "S": 20}, False]
    hnsw(nmslib):
      docker-tag: ann-benchmarks-nmslib
      module: ann_benchmarks.algorithms.nmslib
      constructor: NmslibReuseIndex
      base-args: ["euclidean", "hnsw"]
      run-groups:
        M-48:
          arg-groups:
            - {"M": 48, "post": 2, "efConstruction": 800}
            - False
          query-args: [[50, 70, 90, 120, 160, 200, 400, 600, 700, 800, 1000,
              1400, 1600, 2000]]
        M-32:
          arg-groups:
            - {"M": 32, "post": 2, "efConstruction": 800}
            - False
          query-args: [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 120, 140, 160,
              200, 300, 400, 600, 700, 800, 1000, 1200, 1400, 1600, 2000]]
        M-20:
          arg-groups:
            - {"M": 20, "post": 0, "efConstruction": 800}
            - False
          query-args: [[2, 5, 10, 15, 20, 30, 40, 50, 70, 80]]
        M-12:
          arg-groups:
            - {"M": 12, "post": 0, "efConstruction": 800}
            - False
          query-args: [[1, 2, 5, 10, 15, 20, 30, 40, 50, 70, 80]]
    pynndescent:
      docker-tag: ann-benchmarks-pynndescent
      module: ann_benchmarks.algorithms.pynndescent
      constructor: PyNNDescent
      base-args: ["@metric"]
      run-groups:
        NN-20:
          arg-groups:
            - {"n_neighbors": [20], "diversify_prob": [0.75, 1.0],
               "pruning_degree_multiplier":[1.0, 1.5], leaf_size: 32}
          query-args: [[0.0, 0.01, 0.02, 0.04, 0.08, 0.12, 0.16]]
        NN-40:
          arg-groups:
            - {"n_neighbors": [40], "diversify_prob": [0.5, 1.0],
               "pruning_degree_multiplier":[1.5, 2.0], leaf_size: 48}
          query-args: [[0.0, 0.04, 0.08, 0.12, 0.16, 0.20, 0.24]]
        NN-80:
          arg-groups:
            - {"n_neighbors": [80], "diversify_prob": [0.25, 1.0],
               "pruning_degree_multiplier":[1.75, 2.25], leaf_size: 64}
          query-args: [[0.0, 0.08, 0.12, 0.16, 0.20, 0.24, 0.28, 0.32]]
        NN-120:
          arg-groups:
            - {"n_neighbors": [120], "diversify_prob": [0.0, 1.0],
               "pruning_degree_multiplier":[2.0, 2.5], leaf_size: 80}
          query-args: [[0.08, 0.16, 0.20, 0.24, 0.28, 0.32, 0.36]]
    annoy:
      docker-tag: ann-benchmarks-annoy
      module: ann_benchmarks.algorithms.annoy
      constructor: Annoy
      base-args: ["@metric"]
      run-groups:
        annoy:
          args: [[100, 200, 400]]
          query-args: [[100, 200, 400, 1000, 2000, 4000, 10000, 20000, 40000,
                      100000, 200000, 400000]]
          # This run group produces 3 algorithm instances -- Annoy("angular",
          # 100), Annoy("angular", 200), and Annoy("angular", 400) -- each of
          # which will be used to run 12 different queries.
    faiss-ivf:
      docker-tag: ann-benchmarks-faiss
      module: ann_benchmarks.algorithms.faiss
      constructor: FaissIVF
      base-args: ["euclidean"]
      run-groups:
        base:
          args: [[32,64,128,256,512,1024,2048,4096,8192]]
          query-args: [[1, 5, 10, 50, 100, 200]]
  jaccard:
    bf:
      docker-tag: ann-benchmarks-sklearn
      module: ann_benchmarks.algorithms.bruteforce
      constructor: BruteForceBLAS
      base-args: ["@metric"]
      run-groups:
        base:
          args: {}
    datasketch:
      docker-tag: ann-benchmarks-datasketch
      module: ann_benchmarks.algorithms.datasketch
      constructor: DataSketch
      base-args: ["@metric"]
      run-groups:
        base:
          args:  [[128, 256, 512],[8, 16, 32, 64, 128]]
    puffinn:
      docker-tag: ann-benchmarks-puffinn
      module: ann_benchmarks.algorithms.puffinn
      constructor: Puffinn
      base-args: ["@metric"]
      run-groups:
        base:
            args: [
              [ 16000000, 512000000],
              ['1bit_minhash'],
            ]
            query-args: [[0.1, 0.2, 0.5, 0.7, 0.9, 0.95, 0.99]]
    pynndescent:
      docker-tag: ann-benchmarks-pynndescent
      module: ann_benchmarks.algorithms.pynndescent
      constructor: PyNNDescent
      base-args: ["@metric"]
      run-groups:
        NN-20:
          arg-groups:
            - {"n_neighbors": 20, "diversify_prob": [0.75, 1.0],
               "pruning_degree_multiplier": 1.0, leaf_size: 30}
          query-args: [[0.0, 0.01, 0.02, 0.03, 0.04, 0.06, 0.08, 0.12, 0.16, 0.20]]
        NN-40:
          arg-groups:
            - {"n_neighbors": 40, "diversify_prob": [0.5, 1.0],
               "pruning_degree_multiplier": 1.0, leaf_size: 30}
          query-args: [[0.0, 0.01, 0.02, 0.03, 0.04, 0.06, 0.08, 0.12, 0.16, 0.20]]
        NN-80:
          arg-groups:
            - {"n_neighbors": 80, "diversify_prob": [1.0, 0.25],
               "pruning_degree_multiplier": 1.0, "leaf_size": 60}
          query-args: [[0.0, 0.02, 0.04, 0.06, 0.08, 0.12, 0.14, 0.16, 0.18, 0.20, 0.22]]
        NN-120:
          arg-groups:
            - {"n_neighbors": 120, "diversify_prob": [1.0, 0.125],
               "pruning_degree_multiplier": 1.0, "leaf_size": 80}
          query-args: [[0.0, 0.02, 0.04, 0.06, 0.08, 0.12, 0.14, 0.16, 0.18, 0.20, 0.22]]
    hnsw(nmslib):
      docker-tag: ann-benchmarks-nmslib
      module: ann_benchmarks.algorithms.nmslib
      constructor: NmslibReuseIndex
      base-args: ["@metric", "hnsw"]
      run-groups:
        M-48:
          arg-groups:
            - {"M": 48, "post": 2, "efConstruction": 800}
            - False
          query-args: [[50, 70, 90, 120, 160, 200, 400, 600, 700, 800, 1000,
              1400, 1600, 2000]]
        M-32:
          arg-groups:
            - {"M": 32, "post": 2, "efConstruction": 800}
            - False
          query-args: [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 120, 140, 160,
              200, 300, 400, 600, 700, 800, 1000, 1200, 1400, 1600, 2000]]
        M-20:
          arg-groups:
            - {"M": 20, "post": 0, "efConstruction": 800}
            - False
          query-args: [[2, 5, 10, 15, 20, 30, 40, 50, 70, 80]]
        M-12:
          arg-groups:
            - {"M": 12, "post": 0, "efConstruction": 800}
            - False
          query-args: [[1, 2, 5, 10, 15, 20, 30, 40, 50, 70, 80]]
    SW-graph(nmslib):
      docker-tag: ann-benchmarks-nmslib
      module: ann_benchmarks.algorithms.nmslib
      constructor: NmslibReuseIndex
      base-args: ["@metric", "sw-graph"]
      run-groups:
        NN-30:
          arg-groups:
            - {"NN": 30}
            - False
          query-args: [[700, 650, 550, 450, 350, 275, 200, 150, 120, 80,
              50, 30]]
        NN-15:
          arg-groups:
            - {"NN": 15}
            - False
          query-args: [[80, 50, 30, 20]]
        NN-3:
          arg-groups:
            - {"NN": 3}
            - False
          query-args: [[120, 80, 60, 40, 20, 10, 8, 4, 2]]
    BallTree(nmslib):
      disable: true
      docker-tag: ann-benchmarks-nmslib
      module: ann_benchmarks.algorithms.nmslib
      constructor: NmslibReuseIndex
      base-args: ["@metric", "vptree"]
      run-groups:
        base:
          # When @args is a dictionary, algorithm instances will be generated
          # by taking the Cartesian product of all of its values.
          arg-groups:
                - {"tuneK": 10, "desiredRecall": [0.99, 0.97, 0.95, 0.9, 0.85, 0.8,
                    0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1]}
                - False
